using System;
using Characters;
using Effects;
using Managers;
using StatusEffects.Scriptable;
using UnityEngine;

namespace StatusEffects
{
	public class Invulnerability : StatusEffect
	{
		/// <summary>
		/// Check if rendere is ON or OFF.
		/// </summary>
		private bool _isVisible;

		/// <summary>
		/// Reference to spawned timer view.
		/// </summary>
		private GameObject _timerViewReference = null;
		
		public Invulnerability(ScriptableStatusEffect data, Character target, Character caster) : base(data, target, caster)
		{
			_isVisible = true;
		}

		protected override void Delay()
		{
			throw new System.NotImplementedException();
		}

		protected override void Activate()
		{
			Target.IsInvulnearable = true;
			
			// Add timer view.
			if (((ScriptableInvulnerability) Data).TimerViewPrefab != null)
				_timerViewReference = SpawnManager.Instance.SpawnFollowingAnimationLoop(((ScriptableInvulnerability) Data).TimerViewPrefab, Target.gameObject, new Vector3(0f, 0.8f, 0f), Quaternion.identity);
			
			// Play sound.
			SoundManager.Instance.PlaySingleSfx(((ScriptableInvulnerability) Data).StartSfx);
		}

		protected override void End()
		{
			Target.GetComponent<SpriteRenderer>().enabled = true;
			Target.IsInvulnearable = false;
			
			// Remove timer view.
			if (_timerViewReference)
				SpawnManager.Instance.DespawnAnimation(_timerViewReference, 0f);
		}

		protected override void Repeat()
		{
			if (_isVisible)
			{
				Target.GetComponent<SpriteRenderer>().enabled = false;
				_isVisible = false;
			}
			else
			{
				Target.GetComponent<SpriteRenderer>().enabled = true;
				_isVisible = true;
			}
			
			// Update timer view.
			if (_timerViewReference)
				_timerViewReference.GetComponent<StatusEffectTimer>().TextLabel.text = Mathf.CeilToInt(DurationTimer).ToString();
		}
	}
}
